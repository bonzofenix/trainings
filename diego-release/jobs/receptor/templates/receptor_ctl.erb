#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/receptor
LOG_DIR=/var/vcap/sys/log/receptor
CONF_DIR=/var/vcap/jobs/receptor/config
PIDFILE=$RUN_DIR/receptor.pid
DATA_DIR=/var/vcap/data/receptor
TMP_DIR=$DATA_DIR/tmp

source /var/vcap/packages/pid_utils/pid_utils.sh

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end

  my_ip = discover_external_ip
%>

case $1 in

  start)
    pid_guard $PIDFILE "receptor"

    mkdir -p $RUN_DIR
    mkdir -p $DATA_DIR
    mkdir -p $LOG_DIR

    mkdir -p $TMP_DIR

    echo $$ > $PIDFILE

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    exec /var/vcap/packages/receptor/bin/receptor \
      -address=<%= p("diego.receptor.listen_addr") %> \
      -taskHandlerAddress=<%= "#{my_ip}:1169" %> \
      -debugAddr=<%= p("diego.receptor.debug_addr") %> \
      -etcdCluster=<%= p("diego.receptor.etcd.machines").map{|addr| "\"http://#{addr}:4001\""}.join(",")%> \
      -consulCluster=http://127.0.0.1:8500 \
      -username=<%= p("diego.receptor.username") %> \
      -password=<%= p("diego.receptor.password") %> \
      -registerWithRouter=<%= p("diego.receptor.register_with_router") %> \
      -domainNames=<%= p("diego.receptor.domain_names").join(",") %> \
      -natsAddresses=<%= p("diego.receptor.nats.machines").collect { |addr| "#{addr}:#{p("diego.receptor.nats.port")}" }.join(",") %> \
      -natsUsername=<%= p("diego.receptor.nats.username") %> \
      -natsPassword=<%= p("diego.receptor.nats.password") %> \
      -corsEnabled=<%= p("diego.receptor.cors_enabled") %> \
      -logLevel=<%= p("diego.receptor.log_level") %> \
      2>> $LOG_DIR/receptor.stderr.log \
      1> >(tee -a $LOG_DIR/receptor.stdout.log | logger -t vcap.receptor)

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: receptor_ctl {start|stop}"

    ;;

esac
